cd /var/mobile/SuSuDear.github.io
git pull origin main
git status
git add .
git add path/to/file
git commit -m "update"
git push origin main
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
import SwiftUI
import Combine

struct WangPanView: View {
    @State private var downloadedFiles: [(name: String, size: String)] = [] // 已下载文件及其大小
    @State private var remoteFiles: [(name: String, size: String)] = [] // 远程文件及其大小
    @State private var isEditingMode: Bool = false // 编辑模式
    @State private var selectedRemoteFiles: Set<String> = [] // 选中的远程文件
    @State private var selectedDownloadedFiles: Set<String> = [] // 选中的已下载文件
    @State private var githubToken: String = UserDefaults.standard.string(forKey: "githubToken") ?? "" // GitHub 密钥
    @State private var showTokenInput: Bool = false // 是否显示密钥输入弹窗
    @State private var downloadProgress: [String: Double] = [:] // 下载进度
    @State private var cancellables: Set<AnyCancellable> = [] // 用于存储 Combine 的订阅

    private let fileManager = FileManager.default
    private let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
    private let downloadDirectory: URL

    init() {
        self.downloadDirectory = documentsDirectory.appendingPathComponent("Download")
        createDownloadDirectory()
    }

    var body: some View {
        ZStack {
            List {
                Section(header: Text("远程文件")) {
                    ForEach(remoteFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if let progress = downloadProgress[file.name], progress < 1.0 {
                                // 显示下载进度圈
                                ProgressView(value: progress)
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .frame(width: 24, height: 24)
                            } else {
                                Button(action: {
                                    downloadFile(named: file.name)
                                }) {
                                    Image(systemName: "icloud.and.arrow.down")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                    }
                }

                Section(header: Text("已下载文件")) {
                    ForEach(downloadedFiles, id: \.name) { file in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(fileNameWithoutExtension(file.name))
                                Text(file.size)
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            Spacer()
                            if isEditingMode {
                                Button(action: {
                                    toggleSelection(for: file.name, isRemote: false)
                                }) {
                                    Image(systemName: selectedDownloadedFiles.contains(file.name) ? "checkmark.circle.fill" : "circle")
                                        .foregroundColor(selectedDownloadedFiles.contains(file.name) ? .blue : .gray)
                                }
                                .disabled(!selectedRemoteFiles.isEmpty)
                            }
                        }
                    }
                    .onDelete(perform: deleteDownloadedFile) // 右划删除
                }
            }

            // 圆形按钮
            if isEditingMode {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button(action: {
                            performAction()
                        }) {
                            Image(systemName: actionButtonIcon())
                                .resizable()
                                .frame(width: 60, height: 60)
                                .foregroundColor(.white)
                                .background(actionButtonColor())
                                .clipShape(Circle())
                                .shadow(radius: 5)
                        }
                        .padding()
                    }
                }
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                // 密钥输入按钮
                Button(action: {
                    showTokenInput = true
                }) {
                    Image(systemName: "key.fill")
                        .font(.title2)
                }

                // 编辑按钮
                Button(action: {
                    isEditingMode.toggle()
                    if !isEditingMode {
                        clearSelections()
                    }
                }) {
                    Image(systemName: isEditingMode ? "checkmark.circle" : "pencil.circle")
                        .font(.title2)
                }
            }
        }
        .onAppear {
            fetchRemoteFiles()
            loadDownloadedFiles()
        }
        .alert("输入 GitHub 密钥", isPresented: $showTokenInput, actions: {
            TextField("请输入密钥", text: $githubToken)
                .textInputAutocapitalization(.never)
                .disableAutocorrection(true)
            Button("保存") {
                saveToken()
                fetchRemoteFiles() // 使用新密钥刷新页面
            }
            Button("取消", role: .cancel) {}
        }, message: {
            Text("请输入您的 GitHub Personal Access Token")
        })
    }

    // MARK: - File Management
    private func createDownloadDirectory() {
        if !fileManager.fileExists(atPath: downloadDirectory.path) {
            do {
                try fileManager.createDirectory(at: downloadDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                print("Failed to create download directory: \(error)")
            }
        }
    }

    private func loadDownloadedFiles() {
        do {
            let files = try fileManager.contentsOfDirectory(at: downloadDirectory, includingPropertiesForKeys: [.fileSizeKey], options: .skipsHiddenFiles)
            downloadedFiles = files.map { file in
                let size = (try? file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0) ?? 0
                return (name: file.lastPathComponent, size: formatFileSize(size))
            }
        } catch {
            print("Failed to load downloaded files: \(error)")
        }
    }

    private func fetchRemoteFiles() {
        guard !githubToken.isEmpty else {
            print("GitHub Token is empty. Please input a token.")
            return
        }

        let owner = "SuSuDear"
        let repo = "SuSuDear.github.io"
        let folderPath = "ipa"
        let url = URL(string: "https://api.github.com/repos/\(owner)/\(repo)/contents/\(folderPath)")!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/vnd.github.v3+json", forHTTPHeaderField: "Accept")
        request.addValue("Bearer \(githubToken)", forHTTPHeaderField: "Authorization")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Failed to fetch remote files: \(error)")
                return
            }

            guard let data = data else { return }
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
                    DispatchQueue.main.async {
                        self.remoteFiles = jsonArray.compactMap { dict in
                            if let name = dict["name"] as? String, let size = dict["size"] as? Int {
                                return (name: name, size: self.formatFileSize(size))
                            }
                            return nil
                        }
                    }
                }
            } catch {
                print("Failed to parse JSON: \(error)")
            }
        }
        task.resume()
    }

    private func downloadFile(named fileName: String) {
        let fileURL = URL(string: "https://raw.githubusercontent.com/SuSuDear/SuSuDear.github.io/main/ipa/\(fileName)")!
        let destinationURL = downloadDirectory.appendingPathComponent(fileName)

        // 初始化下载进度
        downloadProgress[fileName] = 0.0

        let task = URLSession.shared.downloadTask(with: fileURL) { tempURL, response, error in
            if let error = error {
                print("Failed to download file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
                return
            }

            guard let tempURL = tempURL else { return }
            do {
                try self.fileManager.moveItem(at: tempURL, to: destinationURL)
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 下载完成，移除进度
                    self.loadDownloadedFiles()
                }
            } catch {
                print("Failed to save file: \(error)")
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = nil // 移除进度
                }
            }
        }

        // 使用 Combine 来跟踪进度
        task.progress.publisher(for: \.fractionCompleted)
            .sink { progress in
                DispatchQueue.main.async {
                    self.downloadProgress[fileName] = progress
                }
            }
            .store(in: &cancellables)

        task.resume()
    }

    private func deleteFile(named fileName: String) {
        let fileURL = downloadDirectory.appendingPathComponent(fileName)
        do {
            try fileManager.removeItem(at: fileURL)
            loadDownloadedFiles()
        } catch {
            print("Failed to delete file: \(error)")
        }
    }

    private func deleteDownloadedFile(at offsets: IndexSet) {
        for index in offsets {
            let fileName = downloadedFiles[index].name
            deleteFile(named: fileName)
        }
    }

    // MARK: - Helper Methods
    private func fileNameWithoutExtension(_ fileName: String) -> String {
        return fileName.components(separatedBy: ".").first ?? fileName
    }

    private func formatFileSize(_ size: Int) -> String {
        if size >= 1_000_000 {
            return String(format: "%.2f MB", Double(size) / 1_000_000.0)
        } else if size >= 1_000 {
            return String(format: "%.2f KB", Double(size) / 1_000.0)
        } else {
            return "\(size) B"
        }
    }

    private func toggleSelection(for file: String, isRemote: Bool) {
        if isRemote {
            if selectedRemoteFiles.contains(file) {
                selectedRemoteFiles.remove(file)
            } else {
                selectedRemoteFiles.insert(file)
            }
        } else {
            if selectedDownloadedFiles.contains(file) {
                selectedDownloadedFiles.remove(file)
            } else {
                selectedDownloadedFiles.insert(file)
            }
        }
    }

    private func clearSelections() {
        selectedRemoteFiles.removeAll()
        selectedDownloadedFiles.removeAll()
    }

    private func actionButtonIcon() -> String {
        if !selectedRemoteFiles.isEmpty {
            return "arrow.down.circle.fill"
        } else if !selectedDownloadedFiles.isEmpty {
            return "trash.circle.fill"
        } else {
            return "checkmark.circle.fill"
        }
    }

    private func actionButtonColor() -> Color {
        if !selectedRemoteFiles.isEmpty {
            return .blue
        } else if !selectedDownloadedFiles.isEmpty {
            return .red
        } else {
            return .green
        }
    }

    private func performAction() {
        if !selectedRemoteFiles.isEmpty {
            for file in selectedRemoteFiles {
                downloadFile(named: file)
            }
            clearSelections()
        } else if !selectedDownloadedFiles.isEmpty {
            for file in selectedDownloadedFiles {
                deleteFile(named: file)
            }
            clearSelections()
        } else {
            isEditingMode = false // 退出编辑模式
        }
    }

    private func saveToken() {
        UserDefaults.standard.set(githubToken, forKey: "githubToken")
    }
}
